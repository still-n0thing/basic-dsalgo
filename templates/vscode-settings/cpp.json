{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"advacne cp template": {
		"prefix": "tourist",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "// NAMESPACE",
		  "using namespace std;",
		  "",
		  "// TYPEDEFS",
		  "typedef long long ll; ",
		  "typedef unsigned long long ull;",
		  "typedef long double lld;",
		  "typedef string str; // copied from Benq's code ",
		  "",
		  "// MACROS",
		  "#define pr(x) cout<<(x)<<nline // From my python template",
		  "#define prl(x) cout<<(x)<<' ' // same as above",
		  "#define nline '\\n' // Copied from a friend ",
		  "#define f first // But I never use pair",
		  "#define s second // Same as above",
		  "#define pb push_back",
		  "#define all(x) (x).begin(),(x).end() // Type less for sorting",
		  "",
		  "// DEBUG FUNCTIONS (very advance)",
		  "template<typename T>long long SIZE(T (&t)){return t.size();}",
		  "template<typename T, size_t N>long long SIZE(T (&t)[N]){return N;}",
		  "string to_string(char t){return \"'\" + string({t}) + \"'\";}",
		  "string to_string(bool t){return t ? \"true\" : \"false\";}",
		  "string to_string(const string &t, long long x1=0, long long x2=1e9){string ret = \"\";for(long long i = min(x1,SIZE(t)), _i = min(x2,SIZE(t)-1); i <= _i; ++i){ret += t[i];}return '\"' + ret + '\"';}",
		  "string to_string(const char* t){string ret(t);return to_string(ret);}",
		  "template<size_t N>string to_string(const bitset<N> &t, long long x1=0, long long x2=1e9){string ret = \"\";for(long long i = min(x1,SIZE(t)); i <= min(x2,SIZE(t)-1); ++i){ret += t[i] + '0';}return to_string(ret);}",
		  "template<typename T, typename... Coords>string to_string(const T (&t), long long x1=0, long long x2=1e9, Coords... C);",
		  "template<typename T, typename S>string to_string(const pair<T, S> &t){return \"(\" + to_string(t.first) + \", \" + to_string(t.second) + \")\";}",
		  "template<typename T, typename... Coords>string to_string(const T (&t), long long x1, long long x2, Coords... C){string ret = \"[\";x1 = min(x1, SIZE(t));auto e = begin(t);advance(e,x1);for(long long i = x1, _i = min(x2,SIZE(t)-1); i <= _i; ++i){ret += to_string(*e, C...) + (i != _i ? \", \" : \"\");e = next(e);}return ret + \"]\";}",
		  "template<long long Index, typename... Ts>struct print_tuple{string operator() (const tuple<Ts...>& t) {string ret = print_tuple<Index - 1, Ts...>{}(t);ret += (Index ? \", \" : \"\");return ret + to_string(get<Index>(t));}};",
		  "template<typename... Ts>struct print_tuple<0, Ts...> {string operator() (const tuple<Ts...>& t) {return to_string(get<0>(t));}};",
		  "template<typename... Ts>string to_string(const tuple<Ts...>& t) {const auto Size = tuple_size<tuple<Ts...>>::value;return print_tuple<Size - 1, Ts...>{}(t);}",
		  "void dbgr(){;}",
		  "template<typename Heads, typename... Tails>void dbgr(Heads H, Tails... T){cout << to_string(H) << \" | \";dbgr(T...);}",
		  "void dbgs(){;}",
		  "template<typename Heads, typename... Tails>void dbgs(Heads H, Tails... T){cout << H << \" \";dbgs(T...);}",
		  "",
		  "// DEBUG",
		  "#ifndef ONLINE_JUDGE",
		  "#define dbgv(...) cerr << to_string(__VA_ARGS__) << endl;",
		  "#define dbg(...) cerr << \"\" << #__VA_ARGS__ << \" = \"; dbgv(__VA_ARGS__);",
		  "#define dbgr(...) dbgr(__VA_ARGS__); cerr << endl;",
		  "#define dbgm(...) cerr << \"\" << #__VA_ARGS__ << \" = \"; dbgr(__VA_ARGS__);",
		  "#else",
		  "#define dbgv(...)",
		  "#define dbg(...)",
		  "#define dbgr(...)",
		  "#define dbgm(...)",
		  "#endif",
		  "",
		  "// CLASS (uncomment for use)",
		  "// class Name{",
		  "// public:",
		  "//     ll a;",
		  "//     str b;",
		  "//     Name(/* args */);",
		  "//     ~Name();",
		  "// };",
		  "",
		  "// CONSTANTS (uncomment for use)",
		  "// const ll mod97 = 1e9+7; ",
		  "// const ll modg = 998244353;",
		  "// const int max_i = 2e5+5; ",
		  "// const ll inf_ll = 1e18; ",
		  "// const lld pi_lld = acos((lld)-1);",
		  "",
		  "// Function (predefined)",
		  "ll binpow(ll a, ll b, ll m = (1e18)) {",
		  "    a %= m;",
		  "    ll res = 1;",
		  "    if(a == 0) return 0;",
		  "    while (b > 0) {",
		  "        if (b & 1) res = (res * a) % m;",
		  "        a = (a * a) % m;",
		  "        b >>= 1;",
		  "    }",
		  "    return res;",
		  "}",
		  "",
		  "// Functions",
		  "",
		  "",
		  "// Solution",
		  "void solve(){",
		  "    ",
		  "}   ",
		  "",
		  "// Main",
		  "int main(){",
		  "    // Fast IO",
		  "    ios::sync_with_stdio(0);",
		  "    cin.tie(NULL);cout.tie(NULL); ",
		  "",
		  "    // For local code execution",
		  "#ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "    freopen(\"error.txt\", \"w\", stderr);",
		  "#endif // ONLINE_JUDGE    ",
		  "",
		  "    // Complete Solution",
		  "    ll T;cin>>T;while(T--)",
		  "    solve();",
		  "    return 0;",
		  "}",
		  "",
		  "// Read this if you ever get stuck ",
		  "// Benq's advice : stuff you should look for",
		  "// 	* int overflow, array bounds",
		  "// 	* special cases (n=1?)",
		  "// 	* do smth instead of nothing and stay organized",
		  "// 	* WRITE STUFF DOWN",
		  "// 	* DON'T GET STUCK ON ONE APPROACH"
		],
		"description": "advacne cp template"
	  },
	  "priyansh template": {
		"prefix": "priyansh",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "// Debug",
		  "#ifndef ONLINE_JUDGE",
		  "#define dbg(x) cerr<<#x<<\" = \"; deb(x); cerr<<endl;",
		  "#else",
		  "#define dbg(x)",
		  "#endif",
		  "",
		  "// Macros",
		  "#define pr(x) cout<<(x)<<nline // From my python template",
		  "#define prl(x) cout<<(x)<<' ' // same as above",
		  "#define nline '\\n' // Copied from a friend ",
		  "#define f first // But I never use pair",
		  "#define s second // Same as above",
		  "#define pb push_back",
		  "",
		  "// Namespace",
		  "using namespace std;",
		  "",
		  "// Typrdefs",
		  "typedef long long ll; ",
		  "typedef unsigned long long ull;",
		  "typedef long double lld;",
		  "typedef string str; // copied from Benq's code ",
		  "",
		  "// Debug Functions",
		  "template<typename T>void deb(T avar){cerr<<avar;}",
		  "template<typename T, typename V>void deb(pair<T,V> apair){cerr<<\"(\";deb(apair.f);cerr<<\", \";deb(apair.s);cerr<<\")\";}",
		  "template<typename T>void deb(vector<T> avec){ cerr<<\"[ \";for(const auto &i: avec){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "template<typename T, typename V>void deb(map<T,V> amap){cerr<<\"[ \";for(const auto &i: amap){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "template<typename T, typename V>void deb(unordered_map<T,V> amap){cerr<<\"[ \";for(const auto &i: amap){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "template<typename T>void deb(set<T> aset){cerr<<\"[ \";for(const auto &i: aset){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "template<typename T>void deb(unordered_set<T> aset){cerr<<\"[ \";for(const auto &i: aset){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "template<typename T>void deb(multiset<T> aset){cerr<<\"[ \";for(const auto &i: aset){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "template<typename T>void deb(unordered_multiset<T> aset){cerr<<\"[ \";for(const auto &i: aset){deb(i);cerr<<' ';}cerr<<\"] \";}",
		  "",
		  "// Constants (uncomment for use)",
		  "// const int MOD = 1e9+7; ",
		  "// const int MX = 2e5+5; ",
		  "// const ll INF = 1e18; ",
		  "// const lld PI = acos((lld)-1);",
		  "",
		  "// Structs (uncomment for use)",
		  "// typedef struct some_name{",
		  "//     ll a;",
		  "//     str b;",
		  "// }real_name_of_struct;",
		  "",
		  "// Functions",
		  "",
		  "",
		  "// Solution",
		  "void solve(){",
		  "",
		  "}",
		  "",
		  "// Main",
		  "int main(){",
		  "    // Fast IO",
		  "    ios::sync_with_stdio(0);",
		  "    cin.tie(NULL);cout.tie(NULL); ",
		  "",
		  "    // For local code ",
		  "#ifndef ONLINE_JUDGE",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "    freopen(\"error.txt\", \"w\", stderr);",
		  "#endif // ONLINE_JUDGE    ",
		  "",
		  "    // Complete Solution",
		  "    ll T;cin>>T;while(T--)",
		  "    solve();",
		  "    return 0;",
		  "}",
		  "",
		  "// Read this if you ever get stuck ",
		  "// Benq's advice : stuff you should look for",
		  "// 	* int overflow, array bounds",
		  "// 	* special cases (n=1?)",
		  "// 	* do smth instead of nothing and stay organized",
		  "// 	* WRITE STUFF DOWN",
		  "// 	* DON'T GET STUCK ON ONE APPROACH"
		],
		"description": "priyansh template"
	  },
	  "template which uses system header to debug": {
		"prefix": "theta",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "using namespace std;",
		  "",
		  "#ifdef LOCAL",
		  "#include \"algo/debug.h\"",
		  "#else",
		  "#define dbgv(...)",
		  "#define dbg(...)",
		  "#define dbgr(...)",
		  "#define dbgm(...)",
		  "#endif",
		  "",
		  "typedef long long ll;",
		  "typedef unsigned long long ull;",
		  "typedef long double lld;",
		  "",
		  "template<class T> using pq = priority_queue<T>;",
		  "template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;",
		  "",
		  "#define pr(x) cout << (x) << '\\n'",
		  "#define prl(x) cout << (x) << ' '",
		  "#define f first",
		  "#define s second",
		  "#define pb push_back",
		  "#define all(x) (x).begin(), (x).end()",
		  "#define sz(x) (int)(x).size()",
		  "",
		  "const long long mod97 = 1e9+7;",
		  "const long long INF = (1e18);",
		  "// const long long modg = 998244353;",
		  "// const int max_i = 2e5+5;",
		  "// const long double pi = acos((lld)-1);",
		  "",
		  "long long binpow(long long a, long long b, long long m = INF) {",
		  "    a %= m;",
		  "    long long res = 1;",
		  "    if(a == 0) return 0;",
		  "    while (b > 0) {",
		  "        if (b & 1) res = (res * a) % m;",
		  "        a = (a * a) % m;",
		  "        b >>= 1;",
		  "    }",
		  "    return res;",
		  "}",
		  "",
		  "void solve(){",
		  "    ",
		  "}   ",
		  "",
		  "int main(){",
		  "    ios::sync_with_stdio(false);",
		  "    cin.tie(nullptr);",
		  "",
		  "#ifdef LOCAL",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "    freopen(\"error.txt\", \"w\", stderr);",
		  "#endif",
		  "",
		  "    long long T = 1;",
		  "    cin >> T; ",
		  "    for(long long tc = 1; tc <= T; tc++){",
		  "        // cout << \"Case #\" << tc << \": \";",
		  "        solve();",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "template which uses system header to debug"
	  },
	  "test case generator": {
		"prefix": "tcgen",
		"body": [
		  "mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
		  "#define uid(a, b) uniform_int_distribution<long long>(a, b)(rng)"
		],
		"description": "test case generator"
	  },
	  "veray basic template": {
		"prefix": "stbasic",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "using namespace std;",
		  "",
		  "#ifdef LOCAL",
		  "#include \"algo/debug.h\"",
		  "#else",
		  "#define dbgv(...)",
		  "#define dbg(...)",
		  "#define dbgr(...)",
		  "#define dbgm(...)",
		  "#endif",
		  "",
		  "void solve(){",
		  "    ",
		  "}   ",
		  "",
		  "int main(){",
		  "    ios::sync_with_stdio(false);",
		  "    cin.tie(nullptr);",
		  "",
		  "#ifdef LOCAL",
		  "    freopen(\"input.txt\", \"r\", stdin);",
		  "    freopen(\"output.txt\", \"w\", stdout);",
		  "    freopen(\"error.txt\", \"w\", stderr);",
		  "#endif",
		  "",
		  "    long long T = 1;",
		  "    cin >> T; ",
		  "    for(long long tc = 1; tc <= T; tc++){",
		  "        // cout << \"Case #\" << tc << \": \";",
		  "        solve();",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "very basic template"
	  }
}